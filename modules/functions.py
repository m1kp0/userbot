import datetime
import requests
import random
from g4f.client import Client
from asyncio import sleep
from telethon import *
from googletrans import Translator
from .client import client as cl

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
generator = Client()
tr = Translator()
saved_msgs = []
alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Øabcdefghijklmnopqrstuvwxyz–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è1234567890,./;[}{]*-+<>!@#$%^&*()_‚Ññ:?=|"


async def edit_msg(msg, text):
    await msg.edit(text)


async def send_msg(bot, chat_id, text):
    await bot.send_message(chat_id, text)


async def delete_msg(msg):
    await msg.delete()


async def error(msg, text):
    await edit_msg(msg, text)
    await sleep(2)
    await delete_msg(msg)


async def get_reply(msg):
    replied_message = await msg.get_reply_message()
    return replied_message


async def delete_msg_command(msg):
    reply = await get_reply(msg)
    if msg.is_reply:
        await delete_msg(reply)
        await delete_msg(msg)
    else:
        await error(msg, "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")


async def like_command(msg):
    await edit_msg(msg, "üëç")


async def dislike_command(msg):
    await edit_msg(msg, "üëé")


async def spam_command(msg):
    reply = await get_reply(msg)
    text = msg.text.split(" ", maxsplit=2)
    try:
        text_to_sms = reply.text if msg.is_reply else text[2]

        await edit_msg(msg, "–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è..")
        for i in range(int(text[1])):
            await send_msg(cl.m1kp, msg.chat_id, text_to_sms)
            await sleep(0.1)

        await delete_msg(msg)
    except:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.—Å–ø–∞–º (–∫–æ–ª-–≤–æ —Å–º—Å) (—Ç–µ–∫—Å—Ç)]")


async def save_command(msg):
    text = msg.text.split(" ", maxsplit=1)
    if msg.is_reply:
        reply = await get_reply(msg)
        saved_msgs.append(reply.text)
        await edit_msg(msg, "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ")
    else:
        try:
            saved_msgs.append(text[1])
            await edit_msg(msg, f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ: {text[1]}")
        except:
            await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.—Å–µ–π–≤ (—Ç–µ–∫—Å—Ç/–æ—Ç–≤–µ—Ç)]")


async def delete_save_command(msg):
    text = msg.text.split(" ", maxsplit=1)
    reply = await get_reply(msg)
    if msg.is_reply:
        if saved_msgs and (reply.text in saved_msgs):
            saved_msgs.remove(reply.text)
            await edit_msg(msg, "–£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö")
        else:
            await edit_msg(msg, f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö")
    else:
        try:
            if saved_msgs and text[1] in saved_msgs:
                saved_msgs.remove(text[1])
                await edit_msg(msg, f"–£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö: {text[1]}")
            else:
                await edit_msg(msg, f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö: {text[1]}")
        except:
            error(
                msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.—É–¥–∞–ª–∏—Ç—å_—Å–µ–π–≤ (—Ç–µ–∫—Å—Ç/–æ—Ç–≤–µ—Ç)]")


async def clear_saves_command(msg):
    if saved_msgs:
        saved_msgs.clear()
        await edit_msg(msg, "–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    else:
        await error(msg, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π")


async def view_saves_command(msg):
    if saved_msgs:
        await edit_msg(msg, "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        for i in saved_msgs:
            await send_msg(cl.m1kp, msg.chat_id, i)
    else:
        await error(msg, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π")


async def time_now_command(msg):
    time_now = datetime.datetime.now().strftime("%H:%M:%S")
    await edit_msg(msg, f"–í—Ä–µ–º—è —Å–µ–π—á–∞—Å: {time_now}")


async def random_percent_command(msg):
    text = msg.text.split(" ", maxsplit=1)
    reply = await get_reply(msg)
    await edit_msg(msg, "–î—É–º–∞—é..")
    await sleep(random.randint(1, 3))
    try:
        text_to_percent = reply.text if msg.is_reply else text[1]
        await edit_msg(msg, f"–î—É–º–∞—é, {text_to_percent} –Ω–∞ {random.randint(0, 100)}%")
    except:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.–ø—Ä–æ—Ü–µ–Ω—Ç (—Ç–µ–∫—Å—Ç/–æ—Ç–≤–µ—Ç)]")


async def random_chance_command(msg):
    text = msg.text.split(" ", maxsplit=1)
    chance = random.randint(0, 100)
    reply = await get_reply(msg)
    await edit_msg(msg, "–î—É–º–∞—é..")
    await sleep(random.randint(1, 3))
    try:
        text_to_chance = reply.text if msg.is_reply else text[1]
        await edit_msg(msg, f"–®–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ {text_to_chance} - {chance}%")
    except:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.—à–∞–Ω—Å (—Ç–µ–∫—Å—Ç/–æ—Ç–≤–µ—Ç)]")


async def random_yes_or_no_command(msg):
    text = msg.text.split(" ", maxsplit=1)
    yes_or_no = random.randint(1, 2)
    reply = await get_reply(msg)
    await edit_msg(msg, "–î—É–º–∞—é..")
    await sleep(random.randint(1, 3))
    try:
        text_to_yes_or_no = reply.text if msg.is_reply else text[1]
        choise_yes_or_no = "–î–∞" if yes_or_no == 1 else "–ù–µ—Ç"
        choise_yes_or_no_2 = "" if yes_or_no == 1 else "–Ω–µ"
        await edit_msg(msg, f"{choise_yes_or_no}, {choise_yes_or_no_2} {text_to_yes_or_no}")
    except:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.–¥–∞–Ω–µ—Ç (—Ç–µ–∫—Å—Ç/–æ—Ç–≤–µ—Ç)]")


async def random_int_command(msg):
    text = msg.text.split(" ", maxsplit=2)
    try:
        randint = random.randint(int(text[1]), int(text[2]))
        await edit_msg(msg, f"–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {text[1]} –¥–æ {text[2]} - {randint}")
    except:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.—á–∏—Å–ª–æ (—á–∏—Å–ª–æ1, —á–∏—Å–ª–æ2)]")


async def random_char_command(msg):
    text = msg.text.split(" ", maxsplit=1)
    reply = await get_reply(msg)
    try:
        text_to_random_char = reply.text if msg.is_reply else text[1]
        randchar = random.choice(text_to_random_char)
        await edit_msg(msg, f"–†–∞–Ω–¥–æ–º–Ω—ã–π —Å–∏–º–≤–æ–ª –≤ {text_to_random_char} - {randchar}")
    except:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.—Å–∏–º–≤–æ–ª (—Ç–µ–∫—Å—Ç/–æ—Ç–≤–µ—Ç))]")


async def random_hash_command(msg):
    text = msg.text.split(" ", maxsplit=1)
    reply = await get_reply(msg)
    try:
        text_to_random_hash = reply.text if msg.is_reply else text[1]
        randhash = hash(text_to_random_hash)
        await edit_msg(msg, f"{randhash}")
    except:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.—Ö–µ—à (—Ç–µ–∫—Å—Ç/–æ—Ç–≤–µ—Ç))]")


async def random_cezar_code_command(msg):
    text = msg.text.split(" ", maxsplit=1)
    reply = await get_reply(msg)
    try:
        text_to_random_cezar_code = reply.text if msg.is_reply else text[1]
        randcode = ""

        for i in text_to_random_cezar_code:
            pos = alphabet.find(i)
            new_pos = pos + 1
            randcode += alphabet[new_pos] if i in alphabet else i

        await edit_msg(msg, randcode)
    except:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.—à–∏—Ñ—Ä (—Ç–µ–∫—Å—Ç/–æ—Ç–≤–µ—Ç))]")


async def cezar_decode_command(msg):
    text = msg.text.split(" ", maxsplit=1)
    reply = await get_reply(msg)
    try:
        text_to_decode = reply.text if msg.is_reply else text[1]
        randcode = ""

        for i in text_to_decode:
            pos = alphabet.find(i)
            old_pos = pos - 1
            randcode += alphabet[old_pos] if i in alphabet else i

        await edit_msg(msg, randcode)
    except:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.—Ä–∞—Å—à–∏—Ñ—Ä (—Ç–µ–∫—Å—Ç/–æ—Ç–≤–µ—Ç))]")


async def iris_autofarm_command(msg):
    text = msg.text.split(" ", maxsplit=1)
    try:
        enabled = True if text[1] == "–≤–∫–ª" else False
        await edit_msg(msg, "–ê–≤—Ç–æ—Ñ–∞—Ä–º –∏—Ä–∏—Å–∞ –≤–∫–ª—é—á–µ–Ω: —Ñ–∞—Ä–º —Ä–∞–∑ –≤ 10 —á–∞—Å–æ–≤") if enabled else await edit_msg(msg, "–ê–≤—Ç–æ—Ñ–∞—Ä–º –∏—Ä–∏—Å–∞ –≤—ã–∫–ª—é—á–µ–Ω")
        while enabled:
            await send_msg(cl.m1kp, msg.chat_id, "–§–µ—Ä–º–∞\n–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å +999")
            await sleep(36000)  # 10 –ß–∞—Å–æ–≤
    except:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.–∞–≤—Ç–æ—Ñ–∞—Ä–º (–≤–∫–ª/–≤—ã–∫–ª)]")


# —Ç—É—Ç –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –±–∞–≥, –±–æ—Ç –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫.
async def google_translate_command(msg):
    reply = await get_reply(msg)
    try:
        if msg.is_reply:
            text_to_tr = reply.text
        else:
            _, *text = msg.raw_text.split(" ")
            text_to_tr = " ".join(text).strip()

        if "-" in text_to_tr:
            text_parts = text_to_tr.split("-")
            text_to_tr = text_parts[0].strip()
            lang = text_parts[1].strip()
        else:
            lang = 'ru'

        await edit_msg(msg, "–ü–µ—Ä–µ–≤–æ–∂—É..")
        tred_text = tr.translate(text_to_tr, dest=lang).text
        await edit_msg(msg, f"–ø–µ—Ä–µ–≤–æ–¥ {text_to_tr} –Ω–∞ {lang}:\n{tred_text}")
    except ValueError:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n[.–ø–µ—Ä–µ–≤–æ–¥ (—Ç–µ–∫—Å—Ç/–æ—Ç–≤–µ—Ç) -(—è–∑—ã–∫)]")
    except Exception as e:
        await error(msg, f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


async def silent_spam_command(msg):
    text = msg.text.split(" ", maxsplit=2)
    reply = await get_reply(msg)
    try:
        text_to_sms = reply.text if msg.is_reply else text[2]
        await edit_msg(msg, "–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è..")
        for i in range(int(text[1])):
            # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é send_msg
            silent_msg = await cl.m1kp.send_message(msg.chat_id, text_to_sms)
            await sleep(0.4)
            await delete_msg(silent_msg)

        await delete_msg(msg)
    except:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.—Ç–∏—Ö–∏–π—Å–ø–∞–º (–∫–æ–ª-–≤–æ —Å–º—Å) (—Ç–µ–∫—Å—Ç)]")


async def edit_msg_command(msg):
    text = msg.text.split(" ", maxsplit=1)
    reply = await get_reply(msg)
    try:
        if msg.is_reply:
            await edit_msg(reply, text[1])
            await delete_msg(msg)
    except:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.–∏–∑–º–µ–Ω–∏—Ç—å (—Ç–µ–∫—Å—Ç)]")


async def quote_command(msg):
    reply = await get_reply(msg)
    quote_bot = "@QuotLyBot"
    quote_chat = await reply.forward_to(quote_bot) if msg.is_reply else await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.—Ü–∏—Ç–∞—Ç–∞ (–æ—Ç–≤–µ—Ç)]")
    await edit_msg(msg, "–°–æ–∑–¥–∞—é —Ü–∏—Ç–∞—Ç—É..")
    async with cl.m1kp.conversation(quote_bot) as conv:
        res = await conv.get_response(quote_chat.id)
        await cl.m1kp.send_read_acknowledge(conv.chat_id)
        await delete_msg(msg)
        await send_msg(cl.m1kp, msg.chat_id, res)


async def generate_img_command(msg):
    text = msg.text.split(" ", maxsplit=1)
    reply = await get_reply(msg)
    try:
        prompt_def_lang = reply if msg.is_reply else text[1]
        await edit_msg(msg, f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é {prompt_def_lang}..")
        prompt_en = tr.translate(prompt_def_lang, dest="en").text
        await edit_msg(msg, f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é {prompt_def_lang} ({prompt_en})..")
        res = await generator.images.generate(
            model="flux",
            prompt=prompt_def_lang,
            response_format="url"
        )
        url = res.data[0].url
        data = requests.get(url).content
        with open("generated_img.jpg", "wb") as file:
            img = file.write(data)
            await cl.m1kp.send_file(msg.chat_id, img, caption=f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt_def_lang}\nURL: {url}')
    except:
        await error(msg, "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏\n[.–≥–µ–Ω (—Ç–µ–∫—Å—Ç)]")


async def send_bot_info_command():
    ...
